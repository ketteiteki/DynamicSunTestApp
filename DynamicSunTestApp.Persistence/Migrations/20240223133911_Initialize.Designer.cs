// <auto-generated />
using System;
using DynamicSunTestApp.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DynamicSunTestApp.Persistence.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240223133911_Initialize")]
    partial class Initialize
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DynamicSunTestApp.Domain.Entities.WeatherArchiveEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WeatherArchiveEntities");
                });

            modelBuilder.Entity("DynamicSunTestApp.Domain.Entities.WeatherArchiveRecordEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AtmosphericPressure")
                        .HasColumnType("integer");

                    b.Property<int?>("Cloudiness")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<double>("DewPoint")
                        .HasColumnType("double precision");

                    b.Property<int?>("HorizontalVisibility")
                        .HasColumnType("integer");

                    b.Property<double>("Humidity")
                        .HasColumnType("double precision");

                    b.Property<int?>("LowerBoundaryOfCloudiness")
                        .HasColumnType("integer");

                    b.Property<double>("Temperature")
                        .HasColumnType("double precision");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time without time zone");

                    b.Property<Guid>("WeatherArchiveId")
                        .HasColumnType("uuid");

                    b.Property<string>("WeatherEvents")
                        .HasColumnType("text");

                    b.Property<string>("WindDirection")
                        .HasColumnType("text");

                    b.Property<int?>("WindSpeed")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WeatherArchiveId");

                    b.ToTable("WeatherArchiveRecordEntities");
                });

            modelBuilder.Entity("DynamicSunTestApp.Domain.Entities.WeatherArchiveRecordEntity", b =>
                {
                    b.HasOne("DynamicSunTestApp.Domain.Entities.WeatherArchiveEntity", null)
                        .WithMany("WeatherArchiveRecordEntities")
                        .HasForeignKey("WeatherArchiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DynamicSunTestApp.Domain.Entities.WeatherArchiveEntity", b =>
                {
                    b.Navigation("WeatherArchiveRecordEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
